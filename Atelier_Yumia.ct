<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="46">
  <CheatEntries>
    <CheatEntry>
      <ID>117</ID>
      <Description>"Atelier Yumia 2025-03-27 Yuki.kaco"</Description>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
    <CheatEntry>
      <ID>145</ID>
      <Description>"Full View Mode"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>LuaCall(function cycleFullCompact(sender,force) local state = not(compactmenuitem.Caption == 'Compact View Mode'); if force~=nil then state = not force end; compactmenuitem.Caption = state and 'Compact View Mode' or 'Full View Mode'; getMainForm().Splitter1.Visible = state; getMainForm().Panel4.Visible    = state; getMainForm().Panel5.Visible    = state; end; function addCompactMenu() if compactmenualreadyexists then return end; local parent = getMainForm().Menu.Items; compactmenuitem = createMenuItem(parent); parent.add(compactmenuitem); compactmenuitem.Caption = 'Compact View Mode'; compactmenuitem.OnClick = cycleFullCompact; compactmenualreadyexists = 'yes'; end; addCompactMenu(); cycleFullCompact(nil,true))
[ENABLE]
[DISABLE]

</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>139</ID>
      <Description>"Init"</Description>
      <Options moHideChildren="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{$lua}
[ENABLE]
local aobList = {
    {name = "ViewMatrix", aob = "0f 29 05 ? ? ? ? 0f 28 49 ? 0f 29 0d ? ? ? ? 0f 28 41 ? 0f 29 05 ? ? ? ? 0f 28 49 ? 0f 29 0d ? ? ? ? c3 cc cc cc cc 40 53", offset = 3, additional = 7}
}

for _, entry in ipairs(aobList) do
    local success = autoAssemble(string.format([[
        aobscanmodule(Finder,%s,%s)
        registersymbol(Finder)
    ]], process, entry.aob))

    if success then
        local addr = getAddress("Finder")
        addr = addr + readInteger(addr + entry.offset) + entry.additional
        unregisterSymbol("Finder")
        registerSymbol(entry.name, addr, true)
    else
        print(string.format("Failed to scan the following AOBs: %s", entry.name))
    end
end

{$asm}
alloc(ManualMoveScale,4)
alloc(ManualJumpScale,4)
alloc(ScriptMoveScale,4)
alloc(ScriptJumpScale,4)
alloc(ScriptUpdateInterval,4)
registersymbol(ManualMoveScale)
registersymbol(ManualJumpScale)
registersymbol(ScriptMoveScale)
registersymbol(ScriptJumpScale)
registersymbol(ScriptUpdateInterval)

ManualMoveScale:
dd (float)500
ManualJumpScale:
dd (float)1000
ScriptMoveScale:
dd (float)500
ScriptJumpScale:
dd (float)1000
ScriptUpdateInterval:
dd (float)10


[DISABLE]

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>161</ID>
          <Description>"PhotoMode"</Description>
          <Options moHideChildren="1"/>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>116</ID>
              <Description>"No Disappear"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
aobscanmodule(NoDisappear,Atelier_Yumia.exe,0f 84 ? ? ? ? f3 0f 10 0d ? ? ? ? 32 d2) // should be unique

alloc(NoDisappearbkp,6,NoDisappear)
registersymbol(NoDisappearbkp)

NoDisappearbkp:
readmem(NoDisappear,6)

NoDisappear:
db 0F 85
 
[DISABLE]

NoDisappear:
readmem(NoDisappearbkp,6)

dealloc(*)
unregistersymbol(*)
{
// ORIGINAL CODE - INJECTION POINT: Atelier_Yumia.exe+16DDDDD

Atelier_Yumia.exe+16DDDB1: 0F 84 6B 01 00 00        - je Atelier_Yumia.exe+16DDF22
Atelier_Yumia.exe+16DDDB7: E8 24 74 F4 FF           - call Atelier_Yumia.exe+16251E0
Atelier_Yumia.exe+16DDDBC: 48 85 C0                 - test rax,rax
Atelier_Yumia.exe+16DDDBF: 0F 84 5D 01 00 00        - je Atelier_Yumia.exe+16DDF22
Atelier_Yumia.exe+16DDDC5: 48 8B C8                 - mov rcx,rax
Atelier_Yumia.exe+16DDDC8: E8 13 87 8E FF           - call Atelier_Yumia.exe+FC64E0
Atelier_Yumia.exe+16DDDCD: 48 85 C0                 - test rax,rax
Atelier_Yumia.exe+16DDDD0: 0F 84 4C 01 00 00        - je Atelier_Yumia.exe+16DDF22
Atelier_Yumia.exe+16DDDD6: 48 8B 4B 78              - mov rcx,[rbx+78]
Atelier_Yumia.exe+16DDDDA: 48 85 C9                 - test rcx,rcx
// ---------- INJECTING HERE ----------
Atelier_Yumia.exe+16DDDDD: 0F 84 3F 01 00 00        - je Atelier_Yumia.exe+16DDF22
// ---------- DONE INJECTING  ----------
Atelier_Yumia.exe+16DDDE3: F3 0F 10 0D C5 25 85 00  - movss xmm1,[Atelier_Yumia.exe+1F303B0]
Atelier_Yumia.exe+16DDDEB: 32 D2                    - xor dl,dl
Atelier_Yumia.exe+16DDDED: F3 0F 10 40 64           - movss xmm0,[rax+64]
Atelier_Yumia.exe+16DDDF2: F3 0F 5C 41 44           - subss xmm0,[rcx+44]
Atelier_Yumia.exe+16DDDF7: 48 89 B4 24 A0 00 00 00  - mov [rsp+000000A0],rsi
Atelier_Yumia.exe+16DDDFF: BE 01 00 00 00           - mov esi,00000001
Atelier_Yumia.exe+16DDE04: 0F 29 74 24 70           - movaps [rsp+70],xmm6
Atelier_Yumia.exe+16DDE09: 44 0F 29 44 24 50        - movaps [rsp+50],xmm8
Atelier_Yumia.exe+16DDE0F: 45 0F 57 C0              - xorps xmm8,xmm8
Atelier_Yumia.exe+16DDE13: 44 0F 29 4C 24 40        - movaps [rsp+40],xmm9
}
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>115</ID>
              <Description>"No Transparent"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
aobscanmodule(NoInVisible1,Atelier_Yumia.exe,e8 ? ? ? ? 80 7c 24 ? ? 0f 57 ff) // should be unique
aobscanmodule(NoInVisible2,Atelier_Yumia.exe,41 ff 90 ? ? ? ? f3 0f 10 44 24) // should be unique

alloc(NoInVisible1bkp,5,NoInVisible1)
registersymbol(NoInVisible1bkp)

alloc(NoInVisible2bkp,7,NoInVisible2)
registersymbol(NoInVisible2bkp)

NoInVisible1bkp:
readmem(NoInVisible1,5)

NoInVisible1:
nop 5

//--------

NoInVisible2bkp:
readmem(NoInVisible2,7)

NoInVisible2:
nop 4
nop 3

[DISABLE]
NoInVisible1:
readmem(NoInVisible1bkp,5)

NoInVisible2:
readmem(NoInVisible2bkp,7)

dealloc(*)
unregistersymbol(*)

{
// ORIGINAL CODE - INJECTION POINT: Atelier_Yumia.exe+DCC51C

Atelier_Yumia.exe+DCC4D4: 0F 29 B4 24 B0 00 00 00     - movaps [rsp+000000B0],xmm6
Atelier_Yumia.exe+DCC4DC: 0F 29 BC 24 A0 00 00 00     - movaps [rsp+000000A0],xmm7
Atelier_Yumia.exe+DCC4E4: 44 0F 29 84 24 90 00 00 00  - movaps [rsp+00000090],xmm8
Atelier_Yumia.exe+DCC4ED: F3 44 0F 10 41 44           - movss xmm8,[rcx+44]
Atelier_Yumia.exe+DCC4F3: F3 44 0F 5D 81 80 00 00 00  - minss xmm8,[rcx+00000080]
Atelier_Yumia.exe+DCC4FC: 44 0F 29 8C 24 80 00 00 00  - movaps [rsp+00000080],xmm9
Atelier_Yumia.exe+DCC505: 44 0F 29 5C 24 60           - movaps [rsp+60],xmm11
Atelier_Yumia.exe+DCC50B: 44 0F 29 64 24 50           - movaps [rsp+50],xmm12
Atelier_Yumia.exe+DCC511: F3 0F 11 44 24 24           - movss [rsp+24],xmm0
Atelier_Yumia.exe+DCC517: C6 44 24 20 00              - mov byte ptr [rsp+20],00
// ---------- INJECTING HERE ----------
Atelier_Yumia.exe+DCC51C: E8 FF FA FF FF              - call Atelier_Yumia.exe+DCC020
// ---------- DONE INJECTING  ----------
Atelier_Yumia.exe+DCC521: 80 7C 24 20 00              - cmp byte ptr [rsp+20],00
Atelier_Yumia.exe+DCC526: 0F 57 FF                    - xorps xmm7,xmm7
Atelier_Yumia.exe+DCC529: 0F 85 15 02 00 00           - jne Atelier_Yumia.exe+DCC744
Atelier_Yumia.exe+DCC52F: 80 7B 7B 00                 - cmp byte ptr [rbx+7B],00
Atelier_Yumia.exe+DCC533: 0F 84 62 01 00 00           - je Atelier_Yumia.exe+DCC69B
Atelier_Yumia.exe+DCC539: 48 8B 05 78 4C A0 01        - mov rax,[Atelier_Yumia.exe+27D11B8]
Atelier_Yumia.exe+DCC540: 33 D2                       - xor edx,edx
Atelier_Yumia.exe+DCC542: 48 8B 48 40                 - mov rcx,[rax+40]
Atelier_Yumia.exe+DCC546: E8 D5 63 95 00              - call Atelier_Yumia.exe+1722920
Atelier_Yumia.exe+DCC54B: 48 8B F8                    - mov rdi,rax
}

{
// ORIGINAL CODE - INJECTION POINT: Atelier_Yumia.exe+DCC574

Atelier_Yumia.exe+DCC54B: 48 8B F8                 - mov rdi,rax
Atelier_Yumia.exe+DCC54E: 48 85 C0                 - test rax,rax
Atelier_Yumia.exe+DCC551: 0F 84 44 01 00 00        - je Atelier_Yumia.exe+DCC69B
Atelier_Yumia.exe+DCC557: 48 8B 4B 48              - mov rcx,[rbx+48]
Atelier_Yumia.exe+DCC55B: 48 85 C9                 - test rcx,rcx
Atelier_Yumia.exe+DCC55E: 0F 84 37 01 00 00        - je Atelier_Yumia.exe+DCC69B
Atelier_Yumia.exe+DCC564: 0F 57 C0                 - xorps xmm0,xmm0
Atelier_Yumia.exe+DCC567: 48 8D 54 24 30           - lea rdx,[rsp+30]
Atelier_Yumia.exe+DCC56C: 0F 29 44 24 30           - movaps [rsp+30],xmm0
Atelier_Yumia.exe+DCC571: 4C 8B 01                 - mov r8,[rcx]
// ---------- INJECTING HERE ----------
Atelier_Yumia.exe+DCC574: 41 FF 90 B8 00 00 00     - call qword ptr [r8+000000B8]
// ---------- DONE INJECTING  ----------
Atelier_Yumia.exe+DCC57B: F3 0F 10 44 24 34        - movss xmm0,[rsp+34]
Atelier_Yumia.exe+DCC581: F3 0F 58 05 27 3E 16 01  - addss xmm0,[Atelier_Yumia.exe+1F303B0]
Atelier_Yumia.exe+DCC589: F3 0F 11 44 24 34        - movss [rsp+34],xmm0
Atelier_Yumia.exe+DCC58F: 48 8B 4F 40              - mov rcx,[rdi+40]
Atelier_Yumia.exe+DCC593: 48 8B 01                 - mov rax,[rcx]
Atelier_Yumia.exe+DCC596: FF 50 10                 - call qword ptr [rax+10]
Atelier_Yumia.exe+DCC599: F3 44 0F 10 64 24 38     - movss xmm12,[rsp+38]
Atelier_Yumia.exe+DCC5A0: 48 8B CB                 - mov rcx,rbx
Atelier_Yumia.exe+DCC5A3: F3 44 0F 10 5C 24 30     - movss xmm11,[rsp+30]
Atelier_Yumia.exe+DCC5AA: F3 0F 10 44 24 34        - movss xmm0,[rsp+34]
}
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>78</ID>
              <Description>"ZoomMinMax"</Description>
              <Options moHideChildren="1"/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
aobscanmodule(PhotoZoomLimit,Atelier_Yumia.exe, f3 0f 5f 05 ? ? ? ? f3 0f 10 0d ? ? ? ? 0f 2f c8) // should be unique

label(return)

alloc(code,128,PhotoZoomLimit)
alloc(PhotoZoomLimitbkp,16,PhotoZoomLimit)
alloc(ZoomMin,4,PhotoZoomLimit)
alloc(ZoomMax,4,PhotoZoomLimit)
registersymbol(PhotoZoomLimitbkp)
registersymbol(ZoomMin)
registersymbol(ZoomMax)

ZoomMin:
  dd (float)40

ZoomMax:
  dd (float)1200

code:
maxss xmm0,[ZoomMin]
movss xmm1,[ZoomMax]
jmp return

PhotoZoomLimitbkp:
readmem(PhotoZoomLimit,16)

PhotoZoomLimit:
jmp code
nop 8
nop 3
return:

[DISABLE]

PhotoZoomLimit:
readmem(PhotoZoomLimitbkp,16)

dealloc(*)
unregistersymbol(*)

{
// ORIGINAL CODE - INJECTION POINT: Atelier_Yumia.exe+16DC28F

Atelier_Yumia.exe+16DC269: F3 0F 59 CE              - mulss xmm1,xmm6
Atelier_Yumia.exe+16DC26D: F3 0F 5C C1              - subss xmm0,xmm1
Atelier_Yumia.exe+16DC271: F3 0F 11 43 70           - movss [rbx+70],xmm0
Atelier_Yumia.exe+16DC276: EB 12                    - jmp Atelier_Yumia.exe+16DC28A
Atelier_Yumia.exe+16DC278: 84 C9                    - test cl,cl
Atelier_Yumia.exe+16DC27A: 74 0E                    - je Atelier_Yumia.exe+16DC28A
Atelier_Yumia.exe+16DC27C: F3 0F 59 CE              - mulss xmm1,xmm6
Atelier_Yumia.exe+16DC280: F3 0F 58 4B 70           - addss xmm1,[rbx+70]
Atelier_Yumia.exe+16DC285: F3 0F 11 4B 70           - movss [rbx+70],xmm1
Atelier_Yumia.exe+16DC28A: F3 0F 10 43 70           - movss xmm0,[rbx+70]
// ---------- INJECTING HERE ----------
Atelier_Yumia.exe+16DC28F: F3 0F 5F 05 11 F0 0C 01  - maxss xmm0,[Atelier_Yumia.exe+27AB2A8]
// ---------- DONE INJECTING  ----------
Atelier_Yumia.exe+16DC297: F3 0F 10 0D 0D F0 0C 01  - movss xmm1,[Atelier_Yumia.exe+27AB2AC]
Atelier_Yumia.exe+16DC29F: 0F 2F C8                 - comiss xmm1,xmm0
Atelier_Yumia.exe+16DC2A2: 77 03                    - ja Atelier_Yumia.exe+16DC2A7
Atelier_Yumia.exe+16DC2A4: 0F 28 C1                 - movaps xmm0,xmm1
Atelier_Yumia.exe+16DC2A7: F3 0F 11 43 70           - movss [rbx+70],xmm0
Atelier_Yumia.exe+16DC2AC: F3 0F 10 4F 14           - movss xmm1,[rdi+14]
Atelier_Yumia.exe+16DC2B1: 48 8B CB                 - mov rcx,rbx
Atelier_Yumia.exe+16DC2B4: E8 17 00 00 00           - call Atelier_Yumia.exe+16DC2D0
Atelier_Yumia.exe+16DC2B9: 0F 28 74 24 20           - movaps xmm6,[rsp+20]
Atelier_Yumia.exe+16DC2BE: 48 8B 74 24 48           - mov rsi,[rsp+48]
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>79</ID>
                  <Description>"ZoomMin 40"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>ZoomMin</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>80</ID>
                  <Description>"ZoomMax 1200"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>ZoomMax</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>81</ID>
              <Description>"PitchLimit Unlock"</Description>
              <Options moHideChildren="1"/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
aobscanmodule(PitchLimitUp,Atelier_Yumia.exe, f3 0f 10 05 ? ? ? ? f3 41 0f 59 f8) // should be unique
aobscanmodule(PitchLimitDown,Atelier_Yumia.exe, f3 0f 10 05 ? ? ? ? f3 0f 5f c2 f3 0f 10 4b) // should be unique

label(return1)
label(return2)

alloc(code1,128,PitchLimitUp)
alloc(code2,128,PitchLimitDown)
alloc(PitchLimitUpbkp,8,PitchLimitUp)
alloc(PitchLimitDownbkp,8,PitchLimitDown)
alloc(PitchUp,4,PitchLimitUp)
alloc(PitchDown,4,PitchLimitDown)
registersymbol(PitchLimitUpbkp)
registersymbol(PitchLimitDownbkp)
registersymbol(PitchUp)
registersymbol(PitchDown)

PitchUp:
  dd (float)1.45

PitchDown:
  dd (float)-1.45

//---------
code1:
movss xmm0,[PitchUp]
jmp return1

PitchLimitUpbkp:
readmem(PitchLimitUp,8)

PitchLimitUp:
jmp code1
nop 3
return1:

//------------

code2:
movss xmm0,[PitchDown]
jmp return2

PitchLimitDownbkp:
readmem(PitchLimitDown,8)

PitchLimitDown:
jmp code2
nop 3
return2:

[DISABLE]

PitchLimitUp:
readmem(PitchLimitUpbkp,8)

PitchLimitDown:
readmem(PitchLimitDownbkp,8)

dealloc(*)
unregistersymbol(*)


{
// ORIGINAL CODE - INJECTION POINT: Atelier_Yumia.exe+16DC3F9

Atelier_Yumia.exe+16DC3D3: F3 0F 10 73 74           - movss xmm6,[rbx+74]
Atelier_Yumia.exe+16DC3D8: 0F 28 C6                 - movaps xmm0,xmm6
Atelier_Yumia.exe+16DC3DB: E8 A0 3A 70 00           - call Atelier_Yumia.exe+1DDFE80
Atelier_Yumia.exe+16DC3E0: 0F 28 F8                 - movaps xmm7,xmm0
Atelier_Yumia.exe+16DC3E3: 0F 28 C6                 - movaps xmm0,xmm6
Atelier_Yumia.exe+16DC3E6: E8 95 3F 70 00           - call Atelier_Yumia.exe+1DE0380
Atelier_Yumia.exe+16DC3EB: 0F 28 D0                 - movaps xmm2,xmm0
Atelier_Yumia.exe+16DC3EE: 0F 28 DF                 - movaps xmm3,xmm7
Atelier_Yumia.exe+16DC3F1: F3 41 0F 59 D1           - mulss xmm2,xmm9
Atelier_Yumia.exe+16DC3F6: 0F 28 C8                 - movaps xmm1,xmm0
// ---------- INJECTING HERE ----------
Atelier_Yumia.exe+16DC3F9: F3 0F 10 05 B7 EE 0C 01  - movss xmm0,[Atelier_Yumia.exe+27AB2B8] 0.70
// ---------- DONE INJECTING  ----------
Atelier_Yumia.exe+16DC401: F3 41 0F 59 F8           - mulss xmm7,xmm8
Atelier_Yumia.exe+16DC406: F3 41 0F 59 D9           - mulss xmm3,xmm9
Atelier_Yumia.exe+16DC40B: F3 0F 58 D7              - addss xmm2,xmm7
Atelier_Yumia.exe+16DC40F: F3 41 0F 59 C8           - mulss xmm1,xmm8
Atelier_Yumia.exe+16DC414: F3 0F 5C D9              - subss xmm3,xmm1
Atelier_Yumia.exe+16DC418: F3 0F 58 53 50           - addss xmm2,[rbx+50]
Atelier_Yumia.exe+16DC41D: 0F 2F D0                 - comiss xmm2,xmm0
Atelier_Yumia.exe+16DC420: 77 0C                    - ja Atelier_Yumia.exe+16DC42E
// ---------- INJECTING HERE ----------
Atelier_Yumia.exe+16DC422: F3 0F 10 05 92 EE 0C 01  - movss xmm0,[Atelier_Yumia.exe+27AB2BC] -0.70
// ---------- DONE INJECTING  ----------
Atelier_Yumia.exe+16DC42A: F3 0F 5F C2              - maxss xmm0,xmm2
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>82</ID>
                  <Description>"PitchUp 1.45"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>PitchUp</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>83</ID>
                  <Description>"PitchDown -1.45"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>PitchDown</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>84</ID>
              <Description>"CameraNoCollision"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
aobscanmodule(CameraNoCollision,Atelier_Yumia.exe,e8 ? ? ? ? 48 8b 07 48 8d 54 24 ? 48 8b cf ff 90 ? ? ? ? 48 8b 07 48 8d 54 24 ? 48 8b cf ff 90 ? ? ? ? 48 8b 07 41 b0) // should be unique

alloc(CameraNoCollisionbkp,5,CameraNoCollision)
registersymbol(CameraNoCollisionbkp)

CameraNoCollisionbkp:
readmem(CameraNoCollision,5)

CameraNoCollision:
nop 5

[DISABLE]

CameraNoCollision:
readmem(CameraNoCollisionbkp,5)

dealloc(*)
unregistersymbol(*)
{
// ORIGINAL CODE - INJECTION POINT: Atelier_Yumia.exe+16DC4DE

Atelier_Yumia.exe+16DC4B1: F3 0F 11 44 24 30  - movss [rsp+30],xmm0
Atelier_Yumia.exe+16DC4B7: 0F 57 C0           - xorps xmm0,xmm0
Atelier_Yumia.exe+16DC4BA: 4C 8D 44 24 30     - lea r8,[rsp+30]
Atelier_Yumia.exe+16DC4BF: 48 8D 54 24 40     - lea rdx,[rsp+40]
Atelier_Yumia.exe+16DC4C4: 0F 29 44 24 40     - movaps [rsp+40],xmm0
Atelier_Yumia.exe+16DC4C9: 48 8B CB           - mov rcx,rbx
Atelier_Yumia.exe+16DC4CC: E8 4F F7 FF FF     - call Atelier_Yumia.exe+16DBC20
Atelier_Yumia.exe+16DC4D1: 4C 8D 44 24 30     - lea r8,[rsp+30]
Atelier_Yumia.exe+16DC4D6: 48 8B CB           - mov rcx,rbx
Atelier_Yumia.exe+16DC4D9: 48 8D 54 24 40     - lea rdx,[rsp+40]
// ---------- INJECTING HERE ----------
Atelier_Yumia.exe+16DC4DE: E8 CD F2 FF FF     - call Atelier_Yumia.exe+16DB7B0
// ---------- DONE INJECTING  ----------
Atelier_Yumia.exe+16DC4E3: 48 8B 07           - mov rax,[rdi]
Atelier_Yumia.exe+16DC4E6: 48 8D 54 24 30     - lea rdx,[rsp+30]
Atelier_Yumia.exe+16DC4EB: 48 8B CF           - mov rcx,rdi
Atelier_Yumia.exe+16DC4EE: FF 90 C0 00 00 00  - call qword ptr [rax+000000C0]
Atelier_Yumia.exe+16DC4F4: 48 8B 07           - mov rax,[rdi]
Atelier_Yumia.exe+16DC4F7: 48 8D 54 24 40     - lea rdx,[rsp+40]
Atelier_Yumia.exe+16DC4FC: 48 8B CF           - mov rcx,rdi
Atelier_Yumia.exe+16DC4FF: FF 90 B8 00 00 00  - call qword ptr [rax+000000B8]
Atelier_Yumia.exe+16DC505: 48 8B 07           - mov rax,[rdi]
Atelier_Yumia.exe+16DC508: 41 B0 01           - mov r8b,01
}

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>88</ID>
              <Description>"CameraSpeed"</Description>
              <Options moHideChildren="1"/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
aobscanmodule(PhotoCameraSpeedFast,Atelier_Yumia.exe, f3 0f 10 0d ? ? ? ? 74 ? f3 0f 10 0d) // should be unique
aobscanmodule(PhotoCameraSpeedSlow,Atelier_Yumia.exe, f3 0f 10 0d ? ? ? ? 40 84 f6) // should be unique

label(return1)
label(return2)

alloc(code1,128,PhotoCameraSpeedFast)
alloc(code2,128,PhotoCameraSpeedSlow)
alloc(PhotoCameraSpeedFastbkp,8,PhotoCameraSpeedFast)
alloc(PhotoCameraSpeedSlowbkp,8,PhotoCameraSpeedSlow)
alloc(CameraSpeedFast,4,PhotoCameraSpeedFast)
alloc(CameraSpeedSlow,4,PhotoCameraSpeedSlow)
registersymbol(PhotoCameraSpeedFastbkp)
registersymbol(PhotoCameraSpeedSlowbkp)
registersymbol(CameraSpeedFast)
registersymbol(CameraSpeedSlow)

CameraSpeedFast:
  dd (float)500

CameraSpeedSlow:
  dd (float)250

//---------
code1:
movss xmm1,[CameraSpeedFast]
jmp return1

PhotoCameraSpeedFastbkp:
readmem(PhotoCameraSpeedFast,8)

PhotoCameraSpeedFast:
jmp code1
nop 3
return1:

//------------

code2:
movss xmm1,[CameraSpeedSlow]
jmp return2

PhotoCameraSpeedSlowbkp:
readmem(PhotoCameraSpeedSlow,8)

PhotoCameraSpeedSlow:
jmp code2
nop 3
return2:

[DISABLE]

PhotoCameraSpeedFast:
readmem(PhotoCameraSpeedFastbkp,8)

PhotoCameraSpeedSlow:
readmem(PhotoCameraSpeedSlowbkp,8)

dealloc(*)
unregistersymbol(*)

{
// ORIGINAL CODE - INJECTION POINT: Atelier_Yumia.exe+16DC24D

Atelier_Yumia.exe+16DC225: 48 8B C8                 - mov rcx,rax
Atelier_Yumia.exe+16DC228: E8 53 55 B9 FF           - call Atelier_Yumia.exe+1271780
Atelier_Yumia.exe+16DC22D: 84 C0                    - test al,al
Atelier_Yumia.exe+16DC22F: 40 0F B6 CD              - movzx ecx,bpl
Atelier_Yumia.exe+16DC233: 48 8B 6C 24 40           - mov rbp,[rsp+40]
Atelier_Yumia.exe+16DC238: 41 0F 45 CE              - cmovne ecx,r14d
Atelier_Yumia.exe+16DC23C: 4C 8B 74 24 50           - mov r14,[rsp+50]
Atelier_Yumia.exe+16DC241: 40 3A F1                 - cmp sil,cl
Atelier_Yumia.exe+16DC244: 74 66                    - je Atelier_Yumia.exe+16DC2AC
Atelier_Yumia.exe+16DC246: 80 3D A3 13 10 01 00     - cmp byte ptr [Atelier_Yumia.exe+27DD5F0],00 check slowSpeed
// ---------- INJECTING HERE ----------
Atelier_Yumia.exe+16DC24D: F3 0F 10 0D F7 90 F0 00  - movss xmm1,[Atelier_Yumia.exe+25E534C] 500.00
// ---------- DONE INJECTING  ----------
Atelier_Yumia.exe+16DC255: 74 08                    - je Atelier_Yumia.exe+16DC25F
// ---------- INJECTING HERE ----------
Atelier_Yumia.exe+16DC257: F3 0F 10 0D B1 90 F0 00  - movss xmm1,[Atelier_Yumia.exe+25E5310] 250.0
// ---------- DONE INJECTING  ----------
Atelier_Yumia.exe+16DC25F: 40 84 F6                 - test sil,sil
Atelier_Yumia.exe+16DC262: 74 14                    - je Atelier_Yumia.exe+16DC278
Atelier_Yumia.exe+16DC264: F3 0F 10 43 70           - movss xmm0,[rbx+70]
Atelier_Yumia.exe+16DC269: F3 0F 59 CE              - mulss xmm1,xmm6
Atelier_Yumia.exe+16DC26D: F3 0F 5C C1              - subss xmm0,xmm1
Atelier_Yumia.exe+16DC271: F3 0F 11 43 70           - movss [rbx+70],xmm0
Atelier_Yumia.exe+16DC276: EB 12                    - jmp Atelier_Yumia.exe+16DC28A
Atelier_Yumia.exe+16DC278: 84 C9                    - test cl,cl
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>89</ID>
                  <Description>"CameraSpeedFast 500"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>CameraSpeedFast</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>90</ID>
                  <Description>"CameraSpeedSlow 250"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>CameraSpeedSlow</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>92</ID>
          <Description>"CameraData Need Zoom Camera Once"</Description>
          <Options moHideChildren="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscanmodule(CameraLimit,Atelier_Yumia.exe,f3 0f 10 70 ? f3 0f 5f f0) // should be unique
aobscanmodule(CameraZoom,Atelier_Yumia.exe,f3 0f 11 73 ? 41 0f 2f f8) // should be unique

label(return1)
label(return2)

alloc(code1,128,CameraLimit)
alloc(code2,128,CameraZoom)
alloc(CameraLimitbkp,5,CameraLimit)
alloc(CameraZoombkp,5,CameraLimit)
alloc(CameraLimitData,8,CameraLimit)
alloc(CameraZoomData,8,CameraLimit)

registersymbol(CameraLimitbkp)
registersymbol(CameraZoombkp)

registersymbol(CameraLimitData)
registersymbol(CameraZoomData)

CameraLimitData:
dq 0

CameraZoomData:
dq 0

//----------

code1:
mov [CameraLimitData],rax
readmem(CameraLimit,5)
//movss xmm6,[rax+24]
jmp return1

CameraLimitbkp:
readmem(CameraLimit,5)

CameraLimit:
jmp code1

return1:

//----------

code2:
mov [CameraZoomData],rbx
readmem(CameraZoom,5)
//movss [rbx+0C],xmm6
jmp return2

CameraZoombkp:
readmem(CameraZoom,5)

CameraZoom:
jmp code2

return2:

[DISABLE]

CameraLimit:
readmem(CameraLimitbkp,5)

CameraZoom:
readmem(CameraZoombkp,5)

dealloc(*)
unregistersymbol(*)

{
// ORIGINAL code - INJECTION POINT: Atelier_Yumia.exe+F912CF

Atelier_Yumia.exe+F912B1: 49 8B D8        - mov rbx,r8
Atelier_Yumia.exe+F912B4: 48 85 C0        - test rax,rax
Atelier_Yumia.exe+F912B7: 74 74           - je Atelier_Yumia.exe+F9132D
Atelier_Yumia.exe+F912B9: 45 84 C9        - test r9b,r9b
Atelier_Yumia.exe+F912BC: 74 6F           - je Atelier_Yumia.exe+F9132D
Atelier_Yumia.exe+F912BE: 8B 49 14        - mov ecx,[rcx+14]
Atelier_Yumia.exe+F912C1: 8B D1           - mov edx,ecx
Atelier_Yumia.exe+F912C3: F3 0F 10 48 28  - movss xmm1,[rax+28]
Atelier_Yumia.exe+F912C8: 0F 28 C1        - movaps xmm0,xmm1
Atelier_Yumia.exe+F912CB: F3 0F 5D C6     - minss xmm0,xmm6
// ---------- INJECTING HERE ----------
Atelier_Yumia.exe+F912CF: F3 0F 10 70 24  - movss xmm6,[rax+24]
// ---------- DONE INJECTING  ----------
Atelier_Yumia.exe+F912D4: F3 0F 5F F0     - maxss xmm6,xmm0
Atelier_Yumia.exe+F912D8: 85 C9           - test ecx,ecx
Atelier_Yumia.exe+F912DA: 74 14           - je Atelier_Yumia.exe+F912F0
Atelier_Yumia.exe+F912DC: 83 EA 01        - sub edx,01
Atelier_Yumia.exe+F912DF: 74 0F           - je Atelier_Yumia.exe+F912F0
Atelier_Yumia.exe+F912E1: 83 EA 01        - sub edx,01
Atelier_Yumia.exe+F912E4: 74 0A           - je Atelier_Yumia.exe+F912F0
Atelier_Yumia.exe+F912E6: 83 EA 07        - sub edx,07
Atelier_Yumia.exe+F912E9: 74 05           - je Atelier_Yumia.exe+F912F0
Atelier_Yumia.exe+F912EB: 83 FA 01        - cmp edx,01
}

{
// ORIGINAL CODE - INJECTION POINT: Atelier_Yumia.exe+F91345

Atelier_Yumia.exe+F91321: 48 8B 08              - mov rcx,[rax]
Atelier_Yumia.exe+F91324: F3 0F 11 71 14        - movss [rcx+14],xmm6
Atelier_Yumia.exe+F91329: 48 8B 5F 38           - mov rbx,[rdi+38]
Atelier_Yumia.exe+F9132D: F3 0F 10 43 10        - movss xmm0,[rbx+10]
Atelier_Yumia.exe+F91332: 0F 2E C6              - ucomiss xmm0,xmm6
Atelier_Yumia.exe+F91335: 7A 02                 - jp Atelier_Yumia.exe+F91339
Atelier_Yumia.exe+F91337: 74 60                 - je Atelier_Yumia.exe+F91399
Atelier_Yumia.exe+F91339: 0F 29 7C 24 40        - movaps [rsp+40],xmm7
Atelier_Yumia.exe+F9133E: 48 8D 4B 14           - lea rcx,[rbx+14]
Atelier_Yumia.exe+F91342: 0F 57 FF              - xorps xmm7,xmm7
// ---------- INJECTING HERE ----------
Atelier_Yumia.exe+F91345: F3 0F 11 73 0C        - movss [rbx+0C],xmm6
// ---------- DONE INJECTING  ----------
Atelier_Yumia.exe+F9134A: 41 0F 2F F8           - comiss xmm7,xmm8
Atelier_Yumia.exe+F9134E: 72 1B                 - jb Atelier_Yumia.exe+F9136B
Atelier_Yumia.exe+F91350: 0F 57 C9              - xorps xmm1,xmm1
Atelier_Yumia.exe+F91353: F3 0F 11 73 10        - movss [rbx+10],xmm6
Atelier_Yumia.exe+F91358: F3 0F 11 73 08        - movss [rbx+08],xmm6
Atelier_Yumia.exe+F9135D: E8 3E 63 79 00        - call Atelier_Yumia.exe+17276A0
Atelier_Yumia.exe+F91362: C7 43 1C 00 00 00 00  - mov [rbx+1C],00000000
Atelier_Yumia.exe+F91369: EB 23                 - jmp Atelier_Yumia.exe+F9138E
Atelier_Yumia.exe+F9136B: 41 0F 28 C8           - movaps xmm1,xmm8
Atelier_Yumia.exe+F9136F: F3 0F 11 43 10        - movss [rbx+10],xmm0
}
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>98</ID>
              <Description>"CameraZoomData"</Description>
              <ShowAsHex>1</ShowAsHex>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>4 Bytes</VariableType>
              <Address>CameraZoomData</Address>
              <Offsets>
                <Offset>0</Offset>
              </Offsets>
              <CheatEntries>
                <CheatEntry>
                  <ID>99</ID>
                  <Description>"Zoom"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>+C</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>93</ID>
              <Description>"CameraLimitData"</Description>
              <ShowAsHex>1</ShowAsHex>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>4 Bytes</VariableType>
              <Address>CameraLimitData</Address>
              <Offsets>
                <Offset>0</Offset>
              </Offsets>
              <CheatEntries>
                <CheatEntry>
                  <ID>95</ID>
                  <Description>"Pitch Up Limit 45"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>+1C</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>94</ID>
                  <Description>"Pitch Down Limit -20"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>+18</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>96</ID>
                  <Description>"Camera ZoomMin 200"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>+24</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>97</ID>
                  <Description>"Camera ZoomMax 700"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>+28</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>110</ID>
          <Description>"Player Need Move Once"</Description>
          <Options moHideChildren="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscanmodule(Player,Atelier_Yumia.exe,66 0f 7f 47 ? e8 ? ? ? ? 48 8b 5c 24) // should be unique
alloc(newmem,$1000,Player)
alloc(p,8,Player)
label(code)
label(return)
label(Playerbkp)
registersymbol(Player)
registersymbol(Playerbkp)
registersymbol(p)
p:
dq 0

newmem:
cmp r13,C70
jne code
cmp r12,30F
jne code
mov [p],rdi
code:
  movdqa [rdi+30],xmm0
  jmp return

Playerbkp:
readmem(Player,5)

Player:
  jmp newmem
return:

[DISABLE]
Player:
readmem(Playerbkp,5)

unregistersymbol(*)
dealloc(*)

{
// ORIGINAL CODE - INJECTION POINT: Atelier_Yumia.exe+28879B

Atelier_Yumia.exe+288766: 4C 8D 44 24 40           - lea r8,[rsp+40]
Atelier_Yumia.exe+28876B: 48 8D 57 30              - lea rdx,[rdi+30]
Atelier_Yumia.exe+28876F: 66 0F 7F 44 24 40        - movdqa [rsp+40],xmm0
Atelier_Yumia.exe+288775: 48 8D 4C 24 30           - lea rcx,[rsp+30]
Atelier_Yumia.exe+28877A: C7 44 24 3C 00 00 80 3F  - mov [rsp+3C],3F800000
Atelier_Yumia.exe+288782: E8 59 37 E5 FF           - call Atelier_Yumia.exe+DBEE0
Atelier_Yumia.exe+288787: 0F 28 44 24 30           - movaps xmm0,[rsp+30]
Atelier_Yumia.exe+28878C: 48 8D 54 24 40           - lea rdx,[rsp+40]
Atelier_Yumia.exe+288791: 48 8B 4F 60              - mov rcx,[rdi+60]
Atelier_Yumia.exe+288795: 66 0F 7F 44 24 40        - movdqa [rsp+40],xmm0
// ---------- INJECTING HERE ----------
Atelier_Yumia.exe+28879B: 66 0F 7F 47 30           - movdqa [rdi+30],xmm0
// ---------- DONE INJECTING  ----------
Atelier_Yumia.exe+2887A0: E8 9B A7 FD FF           - call Atelier_Yumia.exe+262F40
Atelier_Yumia.exe+2887A5: 48 8B 5C 24 60           - mov rbx,[rsp+60]
Atelier_Yumia.exe+2887AA: 48 8B 74 24 68           - mov rsi,[rsp+68]
Atelier_Yumia.exe+2887AF: 48 83 C4 50              - add rsp,50
Atelier_Yumia.exe+2887B3: 5F                       - pop rdi
Atelier_Yumia.exe+2887B4: C3                       - ret
Atelier_Yumia.exe+2887B5: CC                       - int 3
Atelier_Yumia.exe+2887B6: CC                       - int 3
Atelier_Yumia.exe+2887B7: CC                       - int 3
Atelier_Yumia.exe+2887B8: CC                       - int 3
}
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>111</ID>
              <Description>"instance"</Description>
              <ShowAsHex>1</ShowAsHex>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>8 Bytes</VariableType>
              <Address>p</Address>
              <Offsets>
                <Offset>0</Offset>
              </Offsets>
              <CheatEntries>
                <CheatEntry>
                  <ID>112</ID>
                  <Description>"PosX"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>+30</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>113</ID>
                  <Description>"PosY"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>+34</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>114</ID>
                  <Description>"PosZ"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>+38</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>118</ID>
                  <Description>"NoFall"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
aobscanmodule(NoFall,Atelier_Yumia.exe,74 ? 48 8d 93 ? ? ? ? 48 8d 8b ? ? ? ? e8 ? ? ? ? 80 bb) // should be unique

alloc(NoFallbkp,2)
registersymbol(NoFallbkp)

NoFallbkp:
readmem(NoFall,2)

NoFall:
nop 2

[DISABLE]

NoFall:
readmem(NoFallbkp,2)

dealloc(*)
unregistersymbol(*)
{
// ORIGINAL CODE - INJECTION POINT: Atelier_Yumia.exe+28116B

Atelier_Yumia.exe+281137: 73 14                    - jae Atelier_Yumia.exe+28114D
Atelier_Yumia.exe+281139: 0F 1F 80 00 00 00 00     - nop dword ptr [rax+00000000]
Atelier_Yumia.exe+281140: 44 89 71 0C              - mov [rcx+0C],r14d
Atelier_Yumia.exe+281144: 48 83 C1 20              - add rcx,20
Atelier_Yumia.exe+281148: 48 3B CA                 - cmp rcx,rdx
Atelier_Yumia.exe+28114B: 72 F3                    - jb Atelier_Yumia.exe+281140
Atelier_Yumia.exe+28114D: 48 89 BB 98 00 00 00     - mov [rbx+00000098],rdi
Atelier_Yumia.exe+281154: 80 BB C9 00 00 00 00     - cmp byte ptr [rbx+000000C9],00
Atelier_Yumia.exe+28115B: 4C 8B B4 24 58 01 00 00  - mov r14,[rsp+00000158]
Atelier_Yumia.exe+281163: 48 8B BC 24 98 01 00 00  - mov rdi,[rsp+00000198]
// ---------- INJECTING HERE ----------
Atelier_Yumia.exe+28116B: 74 13                    - je Atelier_Yumia.exe+281180
// ---------- DONE INJECTING  ----------
Atelier_Yumia.exe+28116D: 48 8D 93 B0 00 00 00     - lea rdx,[rbx+000000B0]
Atelier_Yumia.exe+281174: 48 8D 8B 90 00 00 00     - lea rcx,[rbx+00000090]
Atelier_Yumia.exe+28117B: E8 90 15 00 00           - call Atelier_Yumia.exe+282710
Atelier_Yumia.exe+281180: 80 BB E9 00 00 00 00     - cmp byte ptr [rbx+000000E9],00
Atelier_Yumia.exe+281187: 74 13                    - je Atelier_Yumia.exe+28119C
Atelier_Yumia.exe+281189: 48 8D 93 D0 00 00 00     - lea rdx,[rbx+000000D0]
Atelier_Yumia.exe+281190: 48 8D 8B 90 00 00 00     - lea rcx,[rbx+00000090]
Atelier_Yumia.exe+281197: E8 74 15 00 00           - call Atelier_Yumia.exe+282710
Atelier_Yumia.exe+28119C: 48 81 C4 70 01 00 00     - add rsp,00000170
Atelier_Yumia.exe+2811A3: 5E                       - pop rsi
}
</AssemblerScript>
                  <Hotkeys>
                    <Hotkey Active="0">
                      <Action>Toggle Activation</Action>
                      <Keys/>
                      <ID>0</ID>
                    </Hotkey>
                  </Hotkeys>
                </CheatEntry>
                <CheatEntry>
                  <ID>155</ID>
                  <Description>"NoMovePosition"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
aobscanmodule(NoMovePosition,Atelier_Yumia.exe,66 0f 7f 41 ? c3 cc cc cc cc cc cc cc 33 c0 41 b8) // should be unique

label(return)
label(NoMovePositionbkp)
alloc(code,128,NoMovePosition)
registersymbol(NoMovePositionbkp)

code:
push rax
mov rax,p
test rax,rax
pop rax
jz NoMovePositionbkp
cmp rcx,[p]
je return

NoMovePositionbkp:
readmem(NoMovePosition,5)
jmp return

NoMovePosition:
jmp code
return:

[DISABLE]

NoMovePosition:
readmem(NoMovePositionbkp,5)

dealloc(*)
unregistersymbol(*)

{
// ORIGINAL CODE - INJECTION POINT: Atelier_Yumia.exe+285443

Atelier_Yumia.exe+285437: CC                 - int 3 
Atelier_Yumia.exe+285438: CC                 - int 3 
Atelier_Yumia.exe+285439: CC                 - int 3 
Atelier_Yumia.exe+28543A: CC                 - int 3 
Atelier_Yumia.exe+28543B: CC                 - int 3 
Atelier_Yumia.exe+28543C: CC                 - int 3 
Atelier_Yumia.exe+28543D: CC                 - int 3 
Atelier_Yumia.exe+28543E: CC                 - int 3 
Atelier_Yumia.exe+28543F: CC                 - int 3 
Atelier_Yumia.exe+285440: 0F 28 02           - movaps xmm0,[rdx]
// ---------- INJECTING HERE ----------
Atelier_Yumia.exe+285443: 66 0F 7F 41 10     - movdqa [rcx+10],xmm0
// ---------- DONE INJECTING  ----------
Atelier_Yumia.exe+285448: C3                 - ret 
Atelier_Yumia.exe+285449: CC                 - int 3 
Atelier_Yumia.exe+28544A: CC                 - int 3 
Atelier_Yumia.exe+28544B: CC                 - int 3 
Atelier_Yumia.exe+28544C: CC                 - int 3 
Atelier_Yumia.exe+28544D: CC                 - int 3 
Atelier_Yumia.exe+28544E: CC                 - int 3 
Atelier_Yumia.exe+28544F: CC                 - int 3 
Atelier_Yumia.exe+285450: 33 C0              - xor eax,eax
Atelier_Yumia.exe+285452: 41 B8 01 00 00 00  - mov r8d,00000001
}
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>143</ID>
                  <Description>"NoClipScript Right Click Set HotKey Default HotKey [~]"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{$lua}
local viewMatrix = getAddress('ViewMatrix')
local CamDirX = viewMatrix + 0xC
local CamDirY = viewMatrix + 0x1C
local CamDirZ = viewMatrix + 0x2C
local basePtr = getAddress('p') -- base address for player
if readInteger(basePtr) == 0 then
   print("Invalid player pointer. You Need to Move Once Get Pos Data And ReEnable.")
   return
end
local x = readPointer(basePtr) + 0x30
local y = readPointer(basePtr) + 0x34
local z = readPointer(basePtr) + 0x38
local moveScale = readFloat(getAddress('ScriptMoveScale'))
local jumpScale = readFloat(getAddress('ScriptJumpScale'))
local updateInterval = readFloat(getAddress('ScriptUpdateInterval'))

function updatePosition(deltaX, deltaY, deltaZ)
   if x ~= nil and y ~= nil and z ~= nil then
      local currX = readFloat(x)
      local currY = readFloat(y)
      local currZ = readFloat(z)

      writeFloat(x, currX + deltaX)
      writeFloat(y, currY + deltaY)
      writeFloat(z, currZ + deltaZ)
   end
end

function p()
   local dirX = readFloat(CamDirX) * moveScale
   local dirY = readFloat(CamDirY) * moveScale
   local dirZ = readFloat(CamDirZ) * moveScale

   if isKeyPressed(VK_W) then
      updatePosition(dirX, dirY, dirZ)
   elseif isKeyPressed(VK_S) then
      updatePosition(-dirX, -dirY, -dirZ)
   elseif isKeyPressed(VK_D) then
      updatePosition(-dirZ, 0, dirX) -- Adjust X using Z component
   elseif isKeyPressed(VK_A) then
      updatePosition(dirZ, 0, -dirX) -- Adjust X using Z component
   elseif isKeyPressed(VK_SPACE) then
      updatePosition(0, jumpScale, 0)
   end
end

function enableTimer()
   tmr = createTimer(nil)
   tmr.Interval = updateInterval
   tmr.OnTimer = p
end

function disableTimer()
   if tmr then
      tmr.setEnable = false
      tmr.destroy()
      tmr = nil
   end
end

[ENABLE]
enableTimer()
getAddressList().getMemoryRecordByDescription("NoMovePosition").Active=true
[DISABLE]
disableTimer()
getAddressList().getMemoryRecordByDescription("NoMovePosition").Active=false

</AssemblerScript>
                  <Hotkeys>
                    <Hotkey>
                      <Action>Toggle Activation</Action>
                      <Keys>
                        <Key>192</Key>
                      </Keys>
                      <ID>0</ID>
                    </Hotkey>
                  </Hotkeys>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>158</ID>
                      <Description>"MoveScale"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>ScriptMoveScale</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>159</ID>
                      <Description>"JumpScale"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>ScriptJumpScale</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>160</ID>
                      <Description>"UpdateInterval"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>ScriptUpdateInterval</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>152</ID>
                  <Description>"EnergySetMax"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
aobscanmodule(EnergyToMax,Atelier_Yumia.exe,66 89 81 ? ? ? ? c3 cc cc cc 48 89 5c 24 ? 55) // should be unique

label(return)
alloc(code,128,EnergyToMax)
alloc(EnergyToMaxbkp,7)
registersymbol(EnergyToMaxbkp)

code:
push rbx
mov rbx,[rcx+D4]
mov [rcx+D2],bx
pop rbx
jmp return

EnergyToMaxbkp:
readmem(EnergyToMax,7)

EnergyToMax:
jmp code
nop 2
return:

[DISABLE]

EnergyToMax:
readmem(EnergyToMaxbkp,7)

dealloc(*)
unregistersymbol(*)

{
// ORIGINAL CODE - INJECTION POINT: Atelier_Yumia.exe+1150A05

Atelier_Yumia.exe+11509DF: 66 45 85 C0           - test r8w,r8w
Atelier_Yumia.exe+11509E3: 66 41 0F 4F C0        - cmovg ax,r8w
Atelier_Yumia.exe+11509E8: 66 89 81 D2 00 00 00  - mov [rcx+000000D2],ax
Atelier_Yumia.exe+11509EF: C3                    - ret 
Atelier_Yumia.exe+11509F0: 0F B7 81 D4 00 00 00  - movzx eax,word ptr [rcx+000000D4]
Atelier_Yumia.exe+11509F7: 66 3B D0              - cmp dx,ax
Atelier_Yumia.exe+11509FA: 7D 09                 - jnl Atelier_Yumia.exe+1150A05
Atelier_Yumia.exe+11509FC: 33 C0                 - xor eax,eax
Atelier_Yumia.exe+11509FE: 66 85 D2              - test dx,dx
Atelier_Yumia.exe+1150A01: 66 0F 4F C2           - cmovg ax,dx
// ---------- INJECTING HERE ----------
Atelier_Yumia.exe+1150A05: 66 89 81 D2 00 00 00  - mov [rcx+000000D2],ax
// ---------- DONE INJECTING  ----------
Atelier_Yumia.exe+1150A0C: C3                    - ret 
Atelier_Yumia.exe+1150A0D: CC                    - int 3 
Atelier_Yumia.exe+1150A0E: CC                    - int 3 
Atelier_Yumia.exe+1150A0F: CC                    - int 3 
Atelier_Yumia.exe+1150A10: 48 89 5C 24 10        - mov [rsp+10],rbx
Atelier_Yumia.exe+1150A15: 55                    - push rbp
Atelier_Yumia.exe+1150A16: 56                    - push rsi
Atelier_Yumia.exe+1150A17: 57                    - push rdi
Atelier_Yumia.exe+1150A18: 41 56                 - push r14
Atelier_Yumia.exe+1150A1A: 41 57                 - push r15
}
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>144</ID>
                  <Description>"Manual Modify Position"</Description>
                  <Options moHideChildren="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>133</ID>
                      <Description>"W"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{$lua}
local viewMatrix = getAddress('ViewMatrix')
local CamDirX = viewMatrix + 0xC
local CamDirY = viewMatrix + 0x1C
local CamDirZ = viewMatrix + 0x2C
local basePtr = getAddress('p') -- base address for player
local x = readPointer(basePtr) + 0x30
local y = readPointer(basePtr) + 0x34
local z = readPointer(basePtr) + 0x38
local moveScale = readFloat(getAddress('ManualMoveScale'))

if x ~= nil and y ~= nil and z ~= nil then
   -- W key movement
   writeFloat(x, readFloat(x) + (readFloat(CamDirX)) * moveScale)
   writeFloat(y, readFloat(y) + (readFloat(CamDirY)) * moveScale)
   writeFloat(z, readFloat(z) + (readFloat(CamDirZ)) * moveScale)
else
   print("Error: Invalid position data detected. Movement aborted.")
end

[ENABLE]
[DISABLE]
</AssemblerScript>
                      <Hotkeys>
                        <Hotkey Active="0">
                          <Action>Toggle Activation</Action>
                          <Keys>
                            <Key>104</Key>
                          </Keys>
                          <ID>0</ID>
                        </Hotkey>
                      </Hotkeys>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>134</ID>
                      <Description>"S"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{$lua}
local viewMatrix = getAddress('ViewMatrix')
local CamDirX = viewMatrix + 0xC
local CamDirY = viewMatrix + 0x1C
local CamDirZ = viewMatrix + 0x2C
local basePtr = getAddress('p') -- base address for player
local x = readPointer(basePtr) + 0x30
local y = readPointer(basePtr) + 0x34
local z = readPointer(basePtr) + 0x38
local moveScale = readFloat(getAddress('ManualMoveScale'))

if x ~= nil and y ~= nil and z ~= nil then
   -- W key movement
   writeFloat(x, readFloat(x) - (readFloat(CamDirX)) * moveScale)
   writeFloat(y, readFloat(y) - (readFloat(CamDirY)) * moveScale)
   writeFloat(z, readFloat(z) - (readFloat(CamDirZ)) * moveScale)
else
   print("Error: Invalid position data detected. Movement aborted.")
end

[ENABLE]
[DISABLE]
</AssemblerScript>
                      <Hotkeys>
                        <Hotkey Active="0">
                          <Action>Toggle Activation</Action>
                          <Keys>
                            <Key>98</Key>
                          </Keys>
                          <ID>0</ID>
                        </Hotkey>
                      </Hotkeys>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>135</ID>
                      <Description>"D"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{$lua}
local viewMatrix = getAddress('ViewMatrix')
local CamDirX = viewMatrix + 0xC
local CamDirY = viewMatrix + 0x1C
local CamDirZ = viewMatrix + 0x2C
local basePtr = getAddress('p') -- base address for player
local x = readPointer(basePtr) + 0x30
local y = readPointer(basePtr) + 0x34
local z = readPointer(basePtr) + 0x38
local moveScale = readFloat(getAddress('ManualMoveScale'))

if x ~= nil and y ~= nil and z ~= nil then
    writeFloat(x,readFloat(x)-(readFloat(CamDirZ))*moveScale)
    writeFloat(z,readFloat(z)+(readFloat(CamDirX))*moveScale)
else
   print("Error: Invalid position data detected. Movement aborted.")
end

[ENABLE]
[DISABLE]



</AssemblerScript>
                      <Hotkeys>
                        <Hotkey Active="0">
                          <Action>Toggle Activation</Action>
                          <Keys>
                            <Key>102</Key>
                          </Keys>
                          <ID>0</ID>
                        </Hotkey>
                      </Hotkeys>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>136</ID>
                      <Description>"A"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{$lua}
local viewMatrix = getAddress('ViewMatrix')
local CamDirX = viewMatrix + 0xC
local CamDirY = viewMatrix + 0x1C
local CamDirZ = viewMatrix + 0x2C
local basePtr = getAddress('p') -- base address for player
local x = readPointer(basePtr) + 0x30
local y = readPointer(basePtr) + 0x34
local z = readPointer(basePtr) + 0x38
local moveScale = readFloat(getAddress('ManualMoveScale'))

if x ~= nil and y ~= nil and z ~= nil then
  writeFloat(x,readFloat(x)+(readFloat(CamDirZ))*moveScale)
  writeFloat(z,readFloat(z)-(readFloat(CamDirX))*moveScale)
else
   print("Error: Invalid position data detected. Movement aborted.")
end

[ENABLE]
[DISABLE]





</AssemblerScript>
                      <Hotkeys>
                        <Hotkey Active="0">
                          <Action>Toggle Activation</Action>
                          <Keys>
                            <Key>100</Key>
                          </Keys>
                          <ID>0</ID>
                        </Hotkey>
                      </Hotkeys>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>157</ID>
                          <Description>"MoveScale"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>Float</VariableType>
                          <Address>ManualMoveScale</Address>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>137</ID>
                      <Description>"Up"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{$lua}
local viewMatrix = getAddress('ViewMatrix')
local CamDirX = viewMatrix + 0xC
local CamDirY = viewMatrix + 0x1C
local CamDirZ = viewMatrix + 0x2C
local basePtr = getAddress('p') -- base address for player
local x = readPointer(basePtr) + 0x30
local y = readPointer(basePtr) + 0x34
local z = readPointer(basePtr) + 0x38
local jumpScale = readFloat(getAddress('ManualJumpScale'))

if x ~= nil and y ~= nil and z ~= nil then
   writeFloat(y,readFloat(y)+jumpScale)
else
   print("Error: Invalid position data detected. Movement aborted.")
end

[ENABLE]
[DISABLE]

</AssemblerScript>
                      <Hotkeys>
                        <Hotkey Active="0">
                          <Action>Toggle Activation</Action>
                          <Keys>
                            <Key>101</Key>
                          </Keys>
                          <ID>0</ID>
                        </Hotkey>
                      </Hotkeys>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>162</ID>
                      <Description>"Down"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{$lua}
local viewMatrix = getAddress('ViewMatrix')
local CamDirX = viewMatrix + 0xC
local CamDirY = viewMatrix + 0x1C
local CamDirZ = viewMatrix + 0x2C
local basePtr = getAddress('p') -- base address for player
local x = readPointer(basePtr) + 0x30
local y = readPointer(basePtr) + 0x34
local z = readPointer(basePtr) + 0x38
local jumpScale = readFloat(getAddress('ManualJumpScale'))

if x ~= nil and y ~= nil and z ~= nil then
   writeFloat(y,readFloat(y)-jumpScale)
else
   print("Error: Invalid position data detected. Movement aborted.")
end

[ENABLE]
[DISABLE]


</AssemblerScript>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>156</ID>
                          <Description>"JumpScale"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>Float</VariableType>
                          <Address>ManualJumpScale</Address>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <CheatCodes>
    <CodeEntry>
      <Description>Change of jna Atelier_Yumia.exe+28873E</Description>
      <AddressString>Atelier_Yumia.exe+288723</AddressString>
      <Before>
        <Byte>98</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>76</Byte>
        <Byte>19</Byte>
      </Actual>
      <After>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>0D</Byte>
        <Byte>CB</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of movdqa [rcx+10],xmm0</Description>
      <AddressString>Atelier_Yumia.exe+285443</AddressString>
      <Before>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
        <Byte>0F</Byte>
        <Byte>28</Byte>
        <Byte>02</Byte>
      </Before>
      <Actual>
        <Byte>66</Byte>
        <Byte>0F</Byte>
        <Byte>7F</Byte>
        <Byte>41</Byte>
        <Byte>10</Byte>
      </Actual>
      <After>
        <Byte>C3</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of call Atelier_Yumia.exe+285440</Description>
      <AddressString>Atelier_Yumia.exe+1BBD0FF</AddressString>
      <Before>
        <Byte>8B</Byte>
        <Byte>D0</Byte>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>CB</Byte>
      </Before>
      <Actual>
        <Byte>E8</Byte>
        <Byte>3C</Byte>
        <Byte>83</Byte>
        <Byte>6C</Byte>
        <Byte>FE</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>83</Byte>
        <Byte>C4</Byte>
        <Byte>30</Byte>
        <Byte>5B</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of movdqa [rdi+10],xmm8</Description>
      <AddressString>Atelier_Yumia.exe+287B52</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>FF</Byte>
        <Byte>FF</Byte>
        <Byte>7F</Byte>
        <Byte>7F</Byte>
      </Before>
      <Actual>
        <Byte>66</Byte>
        <Byte>44</Byte>
        <Byte>0F</Byte>
        <Byte>7F</Byte>
        <Byte>47</Byte>
        <Byte>10</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>B3</Byte>
        <Byte>06</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of movdqa [rdi+10],xmm0</Description>
      <AddressString>Atelier_Yumia.exe+288532</AddressString>
      <Before>
        <Byte>0F</Byte>
        <Byte>28</Byte>
        <Byte>44</Byte>
        <Byte>24</Byte>
        <Byte>40</Byte>
      </Before>
      <Actual>
        <Byte>66</Byte>
        <Byte>0F</Byte>
        <Byte>7F</Byte>
        <Byte>47</Byte>
        <Byte>10</Byte>
      </Actual>
      <After>
        <Byte>4C</Byte>
        <Byte>8D</Byte>
        <Byte>9C</Byte>
        <Byte>24</Byte>
        <Byte>78</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of call Atelier_Yumia.exe+B1BF0</Description>
      <AddressString>Atelier_Yumia.exe+288528</AddressString>
      <Before>
        <Byte>48</Byte>
        <Byte>8D</Byte>
        <Byte>4C</Byte>
        <Byte>24</Byte>
        <Byte>40</Byte>
      </Before>
      <Actual>
        <Byte>E8</Byte>
        <Byte>C3</Byte>
        <Byte>96</Byte>
        <Byte>E2</Byte>
        <Byte>FF</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>28</Byte>
        <Byte>44</Byte>
        <Byte>24</Byte>
        <Byte>40</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of call Atelier_Yumia.exe+278280</Description>
      <AddressString>Atelier_Yumia.exe+288506</AddressString>
      <Before>
        <Byte>24</Byte>
        <Byte>20</Byte>
        <Byte>4C</Byte>
        <Byte>8B</Byte>
        <Byte>C7</Byte>
      </Before>
      <Actual>
        <Byte>E8</Byte>
        <Byte>75</Byte>
        <Byte>FD</Byte>
        <Byte>FE</Byte>
        <Byte>FF</Byte>
      </Actual>
      <After>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>B5</Byte>
        <Byte>C8</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of call Atelier_Yumia.exe+278080</Description>
      <AddressString>Atelier_Yumia.exe+28816D</AddressString>
      <Before>
        <Byte>85</Byte>
        <Byte>30</Byte>
        <Byte>02</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>E8</Byte>
        <Byte>0E</Byte>
        <Byte>FF</Byte>
        <Byte>FE</Byte>
        <Byte>FF</Byte>
      </Actual>
      <After>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>B5</Byte>
        <Byte>A0</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of call Atelier_Yumia.exe+130A30</Description>
      <AddressString>Atelier_Yumia.exe+288144</AddressString>
      <Before>
        <Byte>CC</Byte>
        <Byte>48</Byte>
        <Byte>8D</Byte>
        <Byte>4D</Byte>
        <Byte>C0</Byte>
      </Before>
      <Actual>
        <Byte>E8</Byte>
        <Byte>E7</Byte>
        <Byte>88</Byte>
        <Byte>EA</Byte>
        <Byte>FF</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>28</Byte>
        <Byte>45</Byte>
        <Byte>C0</Byte>
        <Byte>48</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of movss [rcx+04],xmm1</Description>
      <AddressString>Atelier_Yumia.exe+DBEAB</AddressString>
      <Before>
        <Byte>41</Byte>
        <Byte>0F</Byte>
        <Byte>5C</Byte>
        <Byte>48</Byte>
        <Byte>04</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>49</Byte>
        <Byte>04</Byte>
      </Actual>
      <After>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>42</Byte>
        <Byte>08</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of call qword ptr [r8+000000E8]</Description>
      <AddressString>Atelier_Yumia.exe+DEE68F</AddressString>
      <Before>
        <Byte>55</Byte>
        <Byte>C0</Byte>
        <Byte>4C</Byte>
        <Byte>8B</Byte>
        <Byte>01</Byte>
      </Before>
      <Actual>
        <Byte>41</Byte>
        <Byte>FF</Byte>
        <Byte>90</Byte>
        <Byte>E8</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>4F</Byte>
        <Byte>08</Byte>
        <Byte>48</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of call qword ptr [rax+18]</Description>
      <AddressString>Atelier_Yumia.exe+DEE69D</AddressString>
      <Before>
        <Byte>4F</Byte>
        <Byte>08</Byte>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>01</Byte>
      </Before>
      <Actual>
        <Byte>FF</Byte>
        <Byte>50</Byte>
        <Byte>18</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8D</Byte>
        <Byte>55</Byte>
        <Byte>B0</Byte>
        <Byte>48</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of call Atelier_Yumia.exe+DEE9E0</Description>
      <AddressString>Atelier_Yumia.exe+DEE67F</AddressString>
      <Before>
        <Byte>CF</Byte>
        <Byte>48</Byte>
        <Byte>8D</Byte>
        <Byte>55</Byte>
        <Byte>B0</Byte>
      </Before>
      <Actual>
        <Byte>E8</Byte>
        <Byte>5C</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>4F</Byte>
        <Byte>08</Byte>
        <Byte>48</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of call Atelier_Yumia.exe+1736370</Description>
      <AddressString>Atelier_Yumia.exe+1BBD0F4</AddressString>
      <Before>
        <Byte>48</Byte>
        <Byte>8D</Byte>
        <Byte>4C</Byte>
        <Byte>24</Byte>
        <Byte>20</Byte>
      </Before>
      <Actual>
        <Byte>E8</Byte>
        <Byte>77</Byte>
        <Byte>92</Byte>
        <Byte>B7</Byte>
        <Byte>FF</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>D0</Byte>
        <Byte>48</Byte>
        <Byte>8B</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of movdqa [rcx+30],xmm0</Description>
      <AddressString>Atelier_Yumia.exe+285663</AddressString>
      <Before>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
        <Byte>0F</Byte>
        <Byte>28</Byte>
        <Byte>02</Byte>
      </Before>
      <Actual>
        <Byte>66</Byte>
        <Byte>0F</Byte>
        <Byte>7F</Byte>
        <Byte>41</Byte>
        <Byte>30</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>49</Byte>
        <Byte>60</Byte>
        <Byte>E9</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of movdqa [rdi+30],xmm0</Description>
      <AddressString>7FF7FCD30014</AddressString>
      <Before>
        <Byte>3D</Byte>
        <Byte>EC</Byte>
        <Byte>07</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>66</Byte>
        <Byte>0F</Byte>
        <Byte>7F</Byte>
        <Byte>47</Byte>
        <Byte>30</Byte>
      </Actual>
      <After>
        <Byte>E9</Byte>
        <Byte>82</Byte>
        <Byte>87</Byte>
        <Byte>29</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of movdqa [rdi+30],xmm0</Description>
      <AddressString>Atelier_Yumia.exe+287781</AddressString>
      <Before>
        <Byte>85</Byte>
        <Byte>A0</Byte>
        <Byte>02</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>66</Byte>
        <Byte>0F</Byte>
        <Byte>7F</Byte>
        <Byte>47</Byte>
        <Byte>30</Byte>
      </Actual>
      <After>
        <Byte>E8</Byte>
        <Byte>B5</Byte>
        <Byte>B7</Byte>
        <Byte>FD</Byte>
        <Byte>FF</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of movdqa [rdi+30],xmm0</Description>
      <AddressString>Atelier_Yumia.exe+287B06</AddressString>
      <Before>
        <Byte>85</Byte>
        <Byte>60</Byte>
        <Byte>02</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>66</Byte>
        <Byte>0F</Byte>
        <Byte>7F</Byte>
        <Byte>47</Byte>
        <Byte>30</Byte>
      </Actual>
      <After>
        <Byte>E8</Byte>
        <Byte>30</Byte>
        <Byte>B4</Byte>
        <Byte>FD</Byte>
        <Byte>FF</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of call Atelier_Yumia.exe+285660</Description>
      <AddressString>Atelier_Yumia.exe+1BBD082</AddressString>
      <Before>
        <Byte>48</Byte>
        <Byte>8D</Byte>
        <Byte>54</Byte>
        <Byte>24</Byte>
        <Byte>20</Byte>
      </Before>
      <Actual>
        <Byte>E8</Byte>
        <Byte>D9</Byte>
        <Byte>85</Byte>
        <Byte>6C</Byte>
        <Byte>FE</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>83</Byte>
        <Byte>C4</Byte>
        <Byte>40</Byte>
        <Byte>5B</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of je Atelier_Yumia.exe+1BBD087</Description>
      <AddressString>Atelier_Yumia.exe+1BBD07B</AddressString>
      <Before>
        <Byte>4B</Byte>
        <Byte>08</Byte>
        <Byte>48</Byte>
        <Byte>85</Byte>
        <Byte>C9</Byte>
      </Before>
      <Actual>
        <Byte>74</Byte>
        <Byte>0A</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8D</Byte>
        <Byte>54</Byte>
        <Byte>24</Byte>
        <Byte>20</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of call Atelier_Yumia.exe+262F40</Description>
      <AddressString>Atelier_Yumia.exe+2887A0</AddressString>
      <Before>
        <Byte>E9</Byte>
        <Byte>60</Byte>
        <Byte>78</Byte>
        <Byte>D6</Byte>
        <Byte>FF</Byte>
      </Before>
      <Actual>
        <Byte>E8</Byte>
        <Byte>9B</Byte>
        <Byte>A7</Byte>
        <Byte>FD</Byte>
        <Byte>FF</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>5C</Byte>
        <Byte>24</Byte>
        <Byte>60</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of movdqa [rcx+10],xmm0</Description>
      <AddressString>Atelier_Yumia.exe+27F393</AddressString>
      <Before>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
        <Byte>0F</Byte>
        <Byte>28</Byte>
        <Byte>02</Byte>
      </Before>
      <Actual>
        <Byte>66</Byte>
        <Byte>0F</Byte>
        <Byte>7F</Byte>
        <Byte>41</Byte>
        <Byte>10</Byte>
      </Actual>
      <After>
        <Byte>C3</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of movss xmm6,[Atelier_Yumia.exe+2605558]</Description>
      <AddressString>Atelier_Yumia.exe+2818C7</AddressString>
      <Before>
        <Byte>84</Byte>
        <Byte>57</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>35</Byte>
        <Byte>89</Byte>
        <Byte>3C</Byte>
        <Byte>38</Byte>
        <Byte>02</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>83</Byte>
        <Byte>C3</Byte>
        <Byte>04</Byte>
        <Byte>0F</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of movss xmm11,[Atelier_Yumia.exe+26053DC]</Description>
      <AddressString>Atelier_Yumia.exe+2818AA</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>0F</Byte>
        <Byte>57</Byte>
        <Byte>C0</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>44</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>1D</Byte>
        <Byte>29</Byte>
        <Byte>3B</Byte>
        <Byte>38</Byte>
        <Byte>02</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>C1</Byte>
        <Byte>E0</Byte>
        <Byte>05</Byte>
        <Byte>48</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of movss xmm12,[Atelier_Yumia.exe+26059B4]</Description>
      <AddressString>Atelier_Yumia.exe+2817A7</AddressString>
      <Before>
        <Byte>E8</Byte>
        <Byte>B9</Byte>
        <Byte>D6</Byte>
        <Byte>E6</Byte>
        <Byte>FF</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>44</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>25</Byte>
        <Byte>04</Byte>
        <Byte>42</Byte>
        <Byte>38</Byte>
        <Byte>02</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>28</Byte>
        <Byte>F0</Byte>
        <Byte>0F</Byte>
        <Byte>2F</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of call Atelier_Yumia.exe+27F390</Description>
      <AddressString>Atelier_Yumia.exe+1BD4C8F</AddressString>
      <Before>
        <Byte>8B</Byte>
        <Byte>D0</Byte>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>CB</Byte>
      </Before>
      <Actual>
        <Byte>E8</Byte>
        <Byte>FC</Byte>
        <Byte>A6</Byte>
        <Byte>6A</Byte>
        <Byte>FE</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>83</Byte>
        <Byte>C4</Byte>
        <Byte>30</Byte>
        <Byte>5B</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of call Atelier_Yumia.exe+D5E20</Description>
      <AddressString>Atelier_Yumia.exe+2826D2</AddressString>
      <Before>
        <Byte>3C</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>80</Byte>
        <Byte>3F</Byte>
      </Before>
      <Actual>
        <Byte>E8</Byte>
        <Byte>49</Byte>
        <Byte>37</Byte>
        <Byte>E5</Byte>
        <Byte>FF</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>28</Byte>
        <Byte>44</Byte>
        <Byte>24</Byte>
        <Byte>30</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of call Atelier_Yumia.exe+ABB30</Description>
      <AddressString>Atelier_Yumia.exe+2826AC</AddressString>
      <Before>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>44</Byte>
        <Byte>24</Byte>
        <Byte>3C</Byte>
      </Before>
      <Actual>
        <Byte>E8</Byte>
        <Byte>7F</Byte>
        <Byte>94</Byte>
        <Byte>E2</Byte>
        <Byte>FF</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>28</Byte>
        <Byte>44</Byte>
        <Byte>24</Byte>
        <Byte>30</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of call Atelier_Yumia.exe+2814F0</Description>
      <AddressString>Atelier_Yumia.exe+282687</AddressString>
      <Before>
        <Byte>B6</Byte>
        <Byte>C6</Byte>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>CF</Byte>
      </Before>
      <Actual>
        <Byte>E8</Byte>
        <Byte>64</Byte>
        <Byte>EE</Byte>
        <Byte>FF</Byte>
        <Byte>FF</Byte>
      </Actual>
      <After>
        <Byte>EB</Byte>
        <Byte>04</Byte>
        <Byte>C6</Byte>
        <Byte>47</Byte>
        <Byte>50</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of movss xmm1,[Atelier_Yumia.exe+25B1100]</Description>
      <AddressString>Atelier_Yumia.exe+282675</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>76</Byte>
        <Byte>19</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>0D</Byte>
        <Byte>83</Byte>
        <Byte>EA</Byte>
        <Byte>32</Byte>
        <Byte>02</Byte>
      </Actual>
      <After>
        <Byte>4C</Byte>
        <Byte>8B</Byte>
        <Byte>CB</Byte>
        <Byte>44</Byte>
        <Byte>0F</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of call Atelier_Yumia.exe+280CD0</Description>
      <AddressString>Atelier_Yumia.exe+282666</AddressString>
      <Before>
        <Byte>B6</Byte>
        <Byte>C2</Byte>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>F9</Byte>
      </Before>
      <Actual>
        <Byte>E8</Byte>
        <Byte>65</Byte>
        <Byte>E6</Byte>
        <Byte>FF</Byte>
        <Byte>FF</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>83</Byte>
        <Byte>BF</Byte>
        <Byte>98</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of addss xmm0,[Atelier_Yumia.exe+25B1100]</Description>
      <AddressString>Atelier_Yumia.exe+280D6B</AddressString>
      <Before>
        <Byte>A5</Byte>
        <Byte>90</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>58</Byte>
        <Byte>05</Byte>
        <Byte>8D</Byte>
        <Byte>03</Byte>
        <Byte>33</Byte>
        <Byte>02</Byte>
      </Actual>
      <After>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>59</Byte>
        <Byte>C6</Byte>
        <Byte>F3</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of call Atelier_Yumia.exe+26AFE0</Description>
      <AddressString>Atelier_Yumia.exe+280E01</AddressString>
      <Before>
        <Byte>48</Byte>
        <Byte>85</Byte>
        <Byte>C9</Byte>
        <Byte>74</Byte>
        <Byte>07</Byte>
      </Before>
      <Actual>
        <Byte>E8</Byte>
        <Byte>DA</Byte>
        <Byte>A1</Byte>
        <Byte>FE</Byte>
        <Byte>FF</Byte>
      </Actual>
      <After>
        <Byte>EB</Byte>
        <Byte>0A</Byte>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>48</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of call Atelier_Yumia.exe+1A8FE0</Description>
      <AddressString>Atelier_Yumia.exe+280E24</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>48</Byte>
        <Byte>8D</Byte>
        <Byte>4B</Byte>
        <Byte>10</Byte>
      </Before>
      <Actual>
        <Byte>E8</Byte>
        <Byte>B7</Byte>
        <Byte>81</Byte>
        <Byte>F2</Byte>
        <Byte>FF</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>2F</Byte>
        <Byte>05</Byte>
        <Byte>88</Byte>
        <Byte>43</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of call Atelier_Yumia.exe+EEE60</Description>
      <AddressString>Atelier_Yumia.exe+280E9F</AddressString>
      <Before>
        <Byte>01</Byte>
        <Byte>44</Byte>
        <Byte>88</Byte>
        <Byte>75</Byte>
        <Byte>F8</Byte>
      </Before>
      <Actual>
        <Byte>E8</Byte>
        <Byte>BC</Byte>
        <Byte>DF</Byte>
        <Byte>E6</Byte>
        <Byte>FF</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>28</Byte>
        <Byte>D0</Byte>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of call Atelier_Yumia.exe+12A970</Description>
      <AddressString>Atelier_Yumia.exe+280EBA</AddressString>
      <Before>
        <Byte>48</Byte>
        <Byte>8D</Byte>
        <Byte>4C</Byte>
        <Byte>24</Byte>
        <Byte>30</Byte>
      </Before>
      <Actual>
        <Byte>E8</Byte>
        <Byte>B1</Byte>
        <Byte>9A</Byte>
        <Byte>EA</Byte>
        <Byte>FF</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>28</Byte>
        <Byte>44</Byte>
        <Byte>24</Byte>
        <Byte>30</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of call Atelier_Yumia.exe+271FD0</Description>
      <AddressString>Atelier_Yumia.exe+280ED4</AddressString>
      <Before>
        <Byte>80</Byte>
        <Byte>48</Byte>
        <Byte>89</Byte>
        <Byte>75</Byte>
        <Byte>F0</Byte>
      </Before>
      <Actual>
        <Byte>E8</Byte>
        <Byte>F7</Byte>
        <Byte>10</Byte>
        <Byte>FF</Byte>
        <Byte>FF</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8D</Byte>
        <Byte>05</Byte>
        <Byte>60</Byte>
        <Byte>E3</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of call qword ptr [r8+rax*8]</Description>
      <AddressString>Atelier_Yumia.exe+280F2A</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>4D</Byte>
        <Byte>8B</Byte>
        <Byte>7D</Byte>
        <Byte>40</Byte>
      </Before>
      <Actual>
        <Byte>41</Byte>
        <Byte>FF</Byte>
        <Byte>14</Byte>
        <Byte>C0</Byte>
      </Actual>
      <After>
        <Byte>33</Byte>
        <Byte>F6</Byte>
        <Byte>4D</Byte>
        <Byte>85</Byte>
        <Byte>FF</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of je Atelier_Yumia.exe+281076</Description>
      <AddressString>Atelier_Yumia.exe+281056</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>48</Byte>
        <Byte>85</Byte>
        <Byte>C9</Byte>
      </Before>
      <Actual>
        <Byte>74</Byte>
        <Byte>1E</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>93</Byte>
        <Byte>A8</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of je Atelier_Yumia.exe+281180</Description>
      <AddressString>Atelier_Yumia.exe+28116B</AddressString>
      <Before>
        <Byte>24</Byte>
        <Byte>98</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>74</Byte>
        <Byte>13</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8D</Byte>
        <Byte>93</Byte>
        <Byte>B0</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of call Atelier_Yumia.exe+282710</Description>
      <AddressString>Atelier_Yumia.exe+28117B</AddressString>
      <Before>
        <Byte>8B</Byte>
        <Byte>90</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>E8</Byte>
        <Byte>90</Byte>
        <Byte>15</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>80</Byte>
        <Byte>BB</Byte>
        <Byte>E9</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of call Atelier_Yumia.exe+282710</Description>
      <AddressString>Atelier_Yumia.exe+281197</AddressString>
      <Before>
        <Byte>8B</Byte>
        <Byte>90</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>E8</Byte>
        <Byte>74</Byte>
        <Byte>15</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>81</Byte>
        <Byte>C4</Byte>
        <Byte>70</Byte>
        <Byte>01</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of jle Atelier_Yumia.exe+282790</Description>
      <AddressString>Atelier_Yumia.exe+282731</AddressString>
      <Before>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>F9</Byte>
        <Byte>85</Byte>
        <Byte>C0</Byte>
      </Before>
      <Actual>
        <Byte>7E</Byte>
        <Byte>5D</Byte>
      </Actual>
      <After>
        <Byte>4C</Byte>
        <Byte>8B</Byte>
        <Byte>41</Byte>
        <Byte>10</Byte>
        <Byte>48</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of movdqa [rdi+30],xmm0</Description>
      <AddressString>7FF764010014</AddressString>
      <Before>
        <Byte>3D</Byte>
        <Byte>EC</Byte>
        <Byte>0F</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>66</Byte>
        <Byte>0F</Byte>
        <Byte>7F</Byte>
        <Byte>47</Byte>
        <Byte>30</Byte>
      </Actual>
      <After>
        <Byte>E9</Byte>
        <Byte>82</Byte>
        <Byte>87</Byte>
        <Byte>29</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov [p],rdi</Description>
      <AddressString>7FF76401000D</AddressString>
      <Before>
        <Byte>85</Byte>
        <Byte>07</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>48</Byte>
        <Byte>89</Byte>
        <Byte>3D</Byte>
        <Byte>EC</Byte>
        <Byte>0F</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>66</Byte>
        <Byte>0F</Byte>
        <Byte>7F</Byte>
        <Byte>47</Byte>
        <Byte>30</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of movdqa [rdi+30],xmm0</Description>
      <AddressString>7FF764010021</AddressString>
      <Before>
        <Byte>84</Byte>
        <Byte>7F</Byte>
        <Byte>87</Byte>
        <Byte>29</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>66</Byte>
        <Byte>0F</Byte>
        <Byte>7F</Byte>
        <Byte>47</Byte>
        <Byte>30</Byte>
      </Actual>
      <After>
        <Byte>E9</Byte>
        <Byte>75</Byte>
        <Byte>87</Byte>
        <Byte>29</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of movdqa [rdi+30],xmm0</Description>
      <AddressString>7FF75AEC0014</AddressString>
      <Before>
        <Byte>3D</Byte>
        <Byte>EC</Byte>
        <Byte>0F</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>66</Byte>
        <Byte>0F</Byte>
        <Byte>7F</Byte>
        <Byte>47</Byte>
        <Byte>30</Byte>
      </Actual>
      <After>
        <Byte>E9</Byte>
        <Byte>82</Byte>
        <Byte>87</Byte>
        <Byte>29</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of movdqa [rdi+30],xmm0</Description>
      <AddressString>7FF75AEC0021</AddressString>
      <Before>
        <Byte>84</Byte>
        <Byte>7F</Byte>
        <Byte>87</Byte>
        <Byte>29</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>66</Byte>
        <Byte>0F</Byte>
        <Byte>7F</Byte>
        <Byte>47</Byte>
        <Byte>30</Byte>
      </Actual>
      <After>
        <Byte>E9</Byte>
        <Byte>75</Byte>
        <Byte>87</Byte>
        <Byte>29</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of movaps xmm0,[rcx+30]</Description>
      <AddressString>Atelier_Yumia.exe+61A400</AddressString>
      <Before>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>28</Byte>
        <Byte>41</Byte>
        <Byte>30</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>C2</Byte>
        <Byte>66</Byte>
        <Byte>0F</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of movdqa [rdi+30],xmm0</Description>
      <AddressString>Atelier_Yumia.exe+28879B</AddressString>
      <Before>
        <Byte>0F</Byte>
        <Byte>7F</Byte>
        <Byte>44</Byte>
        <Byte>24</Byte>
        <Byte>40</Byte>
      </Before>
      <Actual>
        <Byte>66</Byte>
        <Byte>0F</Byte>
        <Byte>7F</Byte>
        <Byte>47</Byte>
        <Byte>30</Byte>
      </Actual>
      <After>
        <Byte>E8</Byte>
        <Byte>9B</Byte>
        <Byte>A7</Byte>
        <Byte>FD</Byte>
        <Byte>FF</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of je Atelier_Yumia.exe+11381D6</Description>
      <AddressString>Atelier_Yumia.exe+11381BE</AddressString>
      <Before>
        <Byte>74</Byte>
        <Byte>2A</Byte>
        <Byte>45</Byte>
        <Byte>84</Byte>
        <Byte>C9</Byte>
      </Before>
      <Actual>
        <Byte>74</Byte>
        <Byte>16</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>B7</Byte>
        <Byte>48</Byte>
        <Byte>16</Byte>
        <Byte>66</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of je Atelier_Yumia.exe+11381E5</Description>
      <AddressString>Atelier_Yumia.exe+11381B9</AddressString>
      <Before>
        <Byte>44</Byte>
        <Byte>C2</Byte>
        <Byte>48</Byte>
        <Byte>3B</Byte>
        <Byte>C2</Byte>
      </Before>
      <Actual>
        <Byte>74</Byte>
        <Byte>2A</Byte>
      </Actual>
      <After>
        <Byte>45</Byte>
        <Byte>84</Byte>
        <Byte>C9</Byte>
        <Byte>74</Byte>
        <Byte>16</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of movss [rcx],xmm0</Description>
      <AddressString>Atelier_Yumia.exe+DBE9C</AddressString>
      <Before>
        <Byte>F3</Byte>
        <Byte>41</Byte>
        <Byte>0F</Byte>
        <Byte>5C</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>01</Byte>
      </Actual>
      <After>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>4A</Byte>
        <Byte>04</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of movdqa [rdi+10],xmm8</Description>
      <AddressString>Atelier_Yumia.exe+2883C3</AddressString>
      <Before>
        <Byte>30</Byte>
        <Byte>45</Byte>
        <Byte>0F</Byte>
        <Byte>2F</Byte>
        <Byte>C2</Byte>
      </Before>
      <Actual>
        <Byte>66</Byte>
        <Byte>44</Byte>
        <Byte>0F</Byte>
        <Byte>7F</Byte>
        <Byte>47</Byte>
        <Byte>10</Byte>
      </Actual>
      <After>
        <Byte>76</Byte>
        <Byte>2C</Byte>
        <Byte>45</Byte>
        <Byte>0F</Byte>
        <Byte>2F</Byte>
      </After>
    </CodeEntry>
  </CheatCodes>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>speedhack_wantedspeed</Name>
      <Address>1D75E4E0000</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <DisassemblerComments>
    <DisassemblerComment>
      <Address>"Atelier_Yumia.exe"+282666</Address>
      <Comment>no Gravitry
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"Atelier_Yumia.exe"+2826AC</Address>
      <Comment>X
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"Atelier_Yumia.exe"+DCC4A7</Address>
      <Comment>is Renerder
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"Atelier_Yumia.exe"+DCC51C</Address>
      <Comment>Nop 會不透明
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"Atelier_Yumia.exe"+DCC546</Address>
      <Comment>Nop會崩潰
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"Atelier_Yumia.exe"+DCC55E</Address>
      <Comment>可以改條件
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"Atelier_Yumia.exe"+DCC574</Address>
      <Comment>Nop 可以不透明 太近還是會透明
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"Atelier_Yumia.exe"+DCC596</Address>
      <Comment>Nop 可以不透明 太近還是會透明
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"Atelier_Yumia.exe"+16DC4CC</Address>
      <Comment>可能是
透明
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"Atelier_Yumia.exe"+16DC4DE</Address>
      <Comment>相機無碰撞
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"Atelier_Yumia.exe"+173A1D5</Address>
      <Comment>Renender
</Comment>
    </DisassemblerComment>
  </DisassemblerComments>
</CheatTable>
